import java.util.*;


public class TransformBoardDiv2
{
	public int[] getOperations(String[] start, String[] target)
	{
		int st = convert(start);
		int end = convert(target);
		int tree[] = new int[1<<17];
		int edge[] = new int[1<<17];
		Queue<Integer> q = new LinkedList<>();
		Arrays.fill(tree, -1);
		q.offer(st);
		tree[st] = -2;
		while (!q.isEmpty()) {
			int n = q.poll();
			for (int i = 0; i < start.length; i++) {
				for (int j = 0; j < start[i].length(); j++) {
					for (int k = j + 1; k < start[i].length(); k++) {
                        checkAndEnqueue(start[i], tree, edge, q, n, i, i, j, k, end);
					}
					for (int k = i + 1; k < start.length; k++) {
                        checkAndEnqueue(start[i], tree, edge, q, n, i, k, j, j, end);
					}
				}
			}
		}

		if (tree[end] == -1)
		    return new int[]{-1};
		ArrayList<Integer> list = new ArrayList<>();
		int node = end;
		while (tree[node] != -2) {
		    list.add(edge[node]);
		    node = tree[node];
		}
		int ans[] = new int[list.size()];
        for (int i = 0; i < ans.length; i++) {
            ans[i] = list.get(ans.length - i - 1);
        }

        return ans;
	}

    private void checkAndEnqueue(String s, int[] tree, int[] edge, Queue<Integer> q, int n, int r1, int r2, int c1, int c2, int end) {
        int pos1 = (r1 * s.length() + c1);
        int pos2 = (r2 * s.length() + c2);
        int child = n;
        if(((n&(1<<pos1)) > 0 && (n&(1<<pos2)) > 0) || ((n&(1<<pos1)) == 0 && (n&(1<<pos2)) == 0)) {
            child = child | (1 << pos2);
        } else {
			child = child & (~(1 << pos2));
        }
        child = child | (1 << pos1);
        if(tree[child] == -1) {
            tree[child] = n;
            q.offer(child);
            edge[child] = r1 * 1000000 + c1 * 10000 + r2 * 100 + c2;
        }
    }

	private int convert(String[] strings) {
		int node = 0;
		String s = "";
		for (int i = 0; i < strings.length; i++) {
			for (int j = 0; j < strings[i].length(); j++) {
				int pos = i * strings[i].length() + j;
				node = node | ((strings[i].charAt(j) == '.' ? 1 : 0) << pos);
			}
		}

		return node;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, String[] p1, boolean hasAnswer, int[] p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p1[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		TransformBoardDiv2 obj;
		int[] answer;
		obj = new TransformBoardDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.getOperations(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p2.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p2[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p2.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p2[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String[] p1;
		int[] p2;
		
		// ----- test 0 -----
		p0 = new String[]{"#.",".."};
		p1 = new String[]{"..",".#"};
		p2 = new int[]{1,10101};
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"..",".#"};
		p1 = new String[]{"#.",".."};
		p2 = new int[]{-1};
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"#..#","#..."};
		p1 = new String[]{"....","...#"};
		p2 = new int[]{3,1000103};
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"#..#","...#",".##.","####"};
		p1 = new String[]{"#..#","...#",".##.","###."};
		p2 = new int[]{-1};
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
