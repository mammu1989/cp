import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PairProduct
{
	public int[] findPair(int n, int a0, int step, long p)
	{
	    if(step == 0) {
	        if(a0 * a0 == p) return new int[]{0,0};
	        else return new int[]{};
        }
        for (long i = 0, a = a0; i < n; i++, a += step) {
            if(a == 0 && p == 0) return new int[]{0,0};
            if(a == 0) continue;
            if(p % a == 0) {
                long x = p / a;
                if((x - a0) % step == 0 && (x - a0) / step < n && (x - a0) / step >= 0) {
                    return new int[]{(int)i, (int)(x - a0) / step};
                }
            }
        }
        return new int[]{};
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, long p3, boolean hasAnswer, int[] p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		PairProduct obj;
		int[] answer;
		obj = new PairProduct();
		long startTime = System.currentTimeMillis();
		answer = obj.findPair(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p4.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p4[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p4.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p4[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		long p3;
		int[] p4;
		
		// ----- test 0 -----
		p0 = 6;
		p1 = 2;
		p2 = 5;
		p3 = 14L;
		p4 = new int[]{0,1};
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 6;
		p1 = 2;
		p2 = 5;
		p3 = 144L;
		p4 = new int[]{2,2};
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 6;
		p1 = 2;
		p2 = 5;
		p3 = 47L;
		p4 = new int[]{};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 6;
		p1 = -200000;
		p2 = -500000;
		p3 = 2040000000000L;
		p4 = new int[]{2,3};
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 20;
		p1 = -5;
		p2 = 1;
		p3 = -6L;
		p4 = new int[]{2,7};
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
