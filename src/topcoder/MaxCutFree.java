import java.util.*;


public class MaxCutFree
{
	public int solve(int n, int[] a, int[] b)
	{
		int count = 0;
		boolean posi[] = new boolean[n];
		int cuts[] = new int[n];
		for (int i = 0; i < a.length; i++) {
			ArrayList<ArrayList<Integer>> adj = createAdj(n, a, b, i);
			int visited[] = new int[n];
			Queue<Integer> q = new LinkedList<>();
			int cnt = 1;
			for (int j = 0; j < n; j++) {
				if (visited[j] == 0) {
					q.offer(j);
					visited[j] = cnt;
					while (!q.isEmpty()) {
						int p = q.poll();
						for (int c : adj.get(p)) {
							if(visited[c] == 0) {
								visited[c] = cnt;
								q.offer(c);
							}
						}
					}
					cnt++;
				}
			}
			if(visited[a[i]] != visited[b[i]]) {
				cuts[a[i]] ++;
				cuts[b[i]] ++;
				posi[a[i]] = true;
				posi[b[i]] = true;
				count++;
			}
		}
		int ans = 0;
		ArrayList<ArrayList<Integer>> adj = createAdj(n, a, b, -1);

		while (true) {
			int max = 0;
			int maxI = -1;
			for (int i = 0; i < n; i++) {
				if(cuts[i] > maxI) {
					maxI = i;
					max = cuts[i];
				}
			}
			if(max == 0) break;
			cuts[maxI] = 0;
			ans++;
			for (int c : adj.get(maxI)) {
				System.out.println(c + " " + cuts[c]);
				if(cuts[c] > 0) cuts[c]--;
			}
		}
		return n - ans;
	}

	private ArrayList<ArrayList<Integer>> createAdj(int n, int[] a, int[] b, int skip) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < a.length; i++) {
			if(i == skip) continue;
			adj.get(a[i]).add(b[i]);
			adj.get(b[i]).add(a[i]);
		}
		return adj;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}");
		System.out.println("]");
		MaxCutFree obj;
		int answer;
		obj = new MaxCutFree();
		long startTime = System.currentTimeMillis();
		answer = obj.solve(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int[] p2;
		int p3;
		
		// ----- test 0 -----
		p0 = 4;
		p1 = new int[]{0,1,2,0};
		p2 = new int[]{1,2,0,3};
		p3 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 6;
		p1 = new int[]{0,1,2,3,3};
		p2 = new int[]{2,2,3,4,5};
		p3 = 4;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 7;
		p1 = new int[]{0,2,4};
		p2 = new int[]{1,3,5};
		p3 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 4;
		p1 = new int[]{0,0,0,1,1,2};
		p2 = new int[]{1,2,3,2,3,3};
		p3 = 4;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
