import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class IncreasingSequencesEasy
{
    int mod = 998244353;
	public int count(int[] L, int[] R)
	{
	    int n = L.length;
		int dp[][] = new int[n][10001];

        for (int i = L[n - 1]; i <= R[n - 1]; i++) dp[n - 1][i] = R[n - 1] - i + 1;
        for (int i = n - 2; i >= 0; i--) {
            for (int j = R[i]; j >= L[i] ; j--) {
                dp[i][j] = j + 1 <= R[i] ? dp[i][j + 1] : 0;
                dp[i][j] = (dp[i][j] + (j + 1 < L[i + 1] ? dp[i + 1][L[i + 1]] : j + 1 > R[i + 1] ? 0 : dp[i + 1][j + 1])) % mod;
            }
        }

		return dp[0][L[0]];
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		IncreasingSequencesEasy obj;
		int answer;
		obj = new IncreasingSequencesEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{1,3,1,4};
		p1 = new int[]{6,5,4,6};
		p2 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{10,20};
		p1 = new int[]{20,30};
		p2 = 120;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{20,10};
		p1 = new int[]{30,20};
		p2 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{4,46,46,35,20,77,20};
		p1 = new int[]{41,65,84,90,49,86,88};
		p2 = 2470;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{1,1,1};
		p1 = new int[]{10000,10000,10000};
		p2 = 908107402;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
