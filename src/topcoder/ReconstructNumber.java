public class ReconstructNumber
{
	public String smallest(String comparisons)
	{
        boolean dp[][] = new boolean[10][comparisons.length() + 1];
        int dp2[][] = new int[10][comparisons.length() + 1];

        for (int i = 1; i < 10; i++) {
            if(isPossible(i, 0, comparisons, dp, dp2)) {
                return getMin(dp, comparisons, i);
            }
        }

        return "";
	}

    private String getMin(boolean[][] dp, String comparisons, int begin) {
	    char num[] = new char[dp[0].length];
        num[0] = (char)(begin + '0');

        for (int i = 0; i < comparisons.length(); i++) {
            int digit = num[i] - '0';
            if(comparisons.charAt(i) == '<') {
                for (int j = digit + 1; j < 10; j++)
                    if(dp[j][i + 1]) { num[i + 1] = (char)(j + '0'); break; }
            } else if(comparisons.charAt(i) == '>') {
                for (int j = 0; j < digit; j++)
                    if(dp[j][i + 1]) { num[i + 1] = (char)(j + '0'); break; }
            } else if(comparisons.charAt(i) == '=') {
                if(dp[digit][i + 1]) { num[i + 1] = (char)(digit + '0'); }
            } else {
                for (int j = 0; j < 10; j++) {
                    if(j == digit) continue;
                    if(dp[j][i + 1]) { num[i + 1] = (char)(j + '0'); break; }
                }
            }
        }

        return new String(num);
    }

    private boolean isPossible(int digit, int i, String comparisons, boolean[][] dp, int[][] dp2) {
	    if(digit == 10 || digit == -1) return false;
	    if(i == comparisons.length()) return dp[digit][i] = true;

	    if(dp2[digit][i] != 0) return dp[digit][i];
	    dp2[digit][i] = 1;
	    if(comparisons.charAt(i) == '<') {
	        for (int j = digit + 1; j < 10; j++)
                dp[digit][i] |= isPossible(j, i + 1, comparisons, dp, dp2);
        } else if(comparisons.charAt(i) == '>') {
	        for (int j = 0; j < digit; j++)
	            dp[digit][i] |= isPossible(j, i + 1, comparisons, dp, dp2);
        } else if(comparisons.charAt(i) == '=') {
	        dp[digit][i] |= isPossible(digit, i + 1, comparisons, dp, dp2);
        } else {
            for (int j = 0; j < 10; j++) {
                if(j == digit) continue;
                dp[digit][i] |= isPossible(j, i + 1, comparisons, dp, dp2);
            }
        }

	    return dp[digit][i];
    }

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		ReconstructNumber obj;
		String answer;
		obj = new ReconstructNumber();
		long startTime = System.currentTimeMillis();
		answer = obj.smallest(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		
		// ----- test 0 -----
		p0 = ">=!<";
		p1 = "10012";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "====!====";
		p1 = "1111100000";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "";
		p1 = "1";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
		p1 = "";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "><<>><=<=>=>";
		p1 = "1012101122110";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = ">>>>>>>>>!!!";
		p1 = "9876543210101";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p
				"<==!!!>!!!><>!===<!>>=<=>><!>>><=>=<===!<>!!<<!!><=!>>!><>>!=><=<<=>!>!==<>>>==!!<<<>>!=!==!>=<!!!=!=<>>><!=><<!=>!<!==!<!>>=!==!<<=><=!>!>=!=>>>>=<=!<<<>!=<!=!>==!==>!==<><=>>>>>!!=>!>====!>!!<><>!=>!><!=<<<=>=!<>>!>=>!===!!=>!!!>=>>>>!><=!!!!><<>=<<<>!!>=><!<=>!>!=>!>!==><=>!<>=!!==!<!>!!<<>><<!=>=!<!><!!<!>=<==!><=!=<<<>><!<>!!>=!>!!<=!><>><<!<=<>=!!>>=<<!<<><<!><><=<=>!=>=!<<<<>><=<<<=>=>!=<<=<==<<><><>>!!=!<!==!!=<==!=><==<!!!=<!=<>>=<>!<===<=!=>!>>==>!!===<===!>><!<><=>!!>!!!>>><<=>!<>!<><<!==<><>><=>>>==<!!>>!>!>=>!><<<!=<>==>!>==<>==>=!!!>>>!><!=>==!!=<=<>>!>><<!!!<===>==<<=>=<!=>!<==>=>!=><=>!!=!=!!>=!>=>=!!<<><>>!=<<=>=!<!>=<>>=!!>!=<!!<>><=>!=!===<!!<><>!!!>>!<<<>>!!=>>>==>>=>>>>!<<!=>=>>!=<<=<!>=!!!<!<=!><><<>>=><<>=<!>>!==!=<<<<<>!=<<<>>=<><>!>!=!><>!><!>!>><!<!>!!!<>>>!!!==!=!==><<<!<<=!<<!>><=><!<<<!=!!=<!>!!=>=><!!>!<<<=<<!<====<<><<!!==>=====!>>=<=!=>>><<<=>><<<=!<<==!!=";
		p1 = "1120120120110110121010001001001010100101122233100021011201202210100123010001012012201010101011001222201201010120221011113210001101010101110012210112340011101010012012334001013210001011230123401011200000123100010101200101100010332211101120022210210122012011110000100166554432101010110432210001222233101123010001220021010001001012201110011233012341011021011101202101220221000010122012345667788013321110110100021001201012110100002104432101223010123000101101221012011210010322101200001110101101010432110101110101012000110111011200111101011210110222100120122102210112011200100132101223001210101120000101222300011210100112220110102101230000101220101000001010101010101011011234450012221012220120111231002100111123300012223410110122001230112201012012334332101011001202101220012334032101120121011012010210210120012301100002101203210010211011223101021021012200132111001012211101101101122101101011132222101011112010112010001010123101021101012012100120001201110101010112012110120101200012201222301234556621012220" +
				
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
